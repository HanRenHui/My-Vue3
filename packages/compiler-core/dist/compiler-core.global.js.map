{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { NodeTypes } from \"./ast\"\n\nfunction createParserContext(template) {\n    return {\n        line: 1,\n        column: 1,\n        offset: 0,\n        source: template,\n        originSource: template\n    }\n}\n\nfunction isEnd(context) {\n    return !context.source.length\n}\n\nfunction getCursor(context) {\n    return {\n        line: context.line,\n        column: context.column,\n        offset: context.offset\n    }\n}\n\nfunction advancePositionWithMutation(context, source, endIndex) {\n    // \u6362\u884C\u7B26\u7684\u4E2A\u6570\n    let lineCount = 0\n    // \u6700\u540E\u4E00\u4E2A\u6362\u884C\u7B26\u7684\u4F4D\u7F6E\n    let linePos = -1\n    for (let i = 0; i < endIndex; i++) {\n        if (source.charCodeAt(i) === 10) {\n            lineCount ++\n            linePos = i\n        }\n    }\n    context.line += lineCount\n    context.offset += endIndex\n    context.column = linePos === -1 ? context.column + endIndex : endIndex - linePos\n}\n\nfunction advanceBy(context, endIndex) {\n    const resource = context.source\n    // \u6BCF\u6B21\u5220\u6389\u5185\u5BB9\u7684\u65F6\u5019 \u90FD\u8981\u66F4\u65B0\u6700\u65B0\u7684\u884C\u5217\u548C\u504F\u79FB\u91CF\u4FE1\u606F\n    advancePositionWithMutation(context, resource, endIndex)\n    context.source = context.source.slice(endIndex)\n}\n\nfunction parseTextData(context, endIndex) {\n    const rawText  = context.source.slice(0, endIndex)\n    advanceBy(context, endIndex)\n    return rawText\n}\n\nfunction getSelection(context, start, end?) {\n    end = end ? end : getCursor(context)\n    return {\n        start,\n        end,\n        source: context.originSource.slice(start.offset, end.offset)\n    }\n    \n}\n\nfunction parseText(context) {\n    const endTokens = ['<', '{{']\n\n    let endIndex = context.source.length\n    for (let i = 0; i < endTokens.length; i++) {\n        const index = context.source.indexOf(endTokens[i])\n        if (index !== -1 && endIndex > index) {\n            endIndex = index\n        }\n    }\n    // \u521B\u5EFA\u884C\u5217\u4FE1\u606F \u7528\u6765\u62A5\u9519\u7528\n    const start = getCursor(context)\n\n    // \u83B7\u53D6\u5185\u5BB9\n    const content = parseTextData(context, endIndex)\n\n\n    // \u8FD4\u56DE\u6587\u672C\u8282\u70B9\u4FE1\u606F\n    return {\n        type: NodeTypes.TEXT,\n        content,\n        loc: getSelection(context, start)\n    }\n}\n\nfunction parseInterpolation(context) {\n    const outerStart = getCursor(context)\n\n    advanceBy(context, 2)\n    \n    const innerEndIndex = context.source.indexOf('}}')\n\n    const preContent = context.source.slice(0, innerEndIndex)\n\n    const innerContent = preContent.trim()\n\n    const innerStartIndex = preContent.indexOf(innerContent)\n\n    // abc }}\n    advanceBy(context, innerStartIndex)\n\n    const innerStart = getCursor(context)\n\n    advanceBy(context, innerContent.length)\n\n    const innerEnd = getCursor(context)\n\n    // \u5E72\u6389 }}\n    const rightIndex = context.source.indexOf('}}')\n    advanceBy(context, rightIndex + 2)\n\n\n    return {\n        type: NodeTypes.INTERPOLATION,\n        content: {\n            type: NodeTypes.SIMPLE_EXPRESSION,\n            content: innerContent,\n            loc: getSelection(context, innerStart, innerEnd)\n        },\n        loc: getSelection(context, outerStart)\n    }\n}\n\nfunction parse(template) {\n    // \u521B\u5EFA\u4E00\u4E2A\u89E3\u6790\u4E0A\u4E0B\u6587\u6765\u8FDB\u884C\u5904\u7406\n    const context = createParserContext(template)\n    let nodes = []\n\n    while(!isEnd(context)) {\n        const source = context.source\n        let node\n\n        if (source.startsWith('{{')) {\n            node = parseInterpolation(context)\n        } else if (source.startsWith('<')) { // \u6807\u7B7Ek\n\n        }\n        if (!node) {\n            // \u6587\u672C\n            node = parseText(context)\n        }\n\n        nodes.push(node)\n        console.log('node', node)\n        break\n    }\n}\n\nexport function compile(template) {\n    const templateAST = parse(template)\n\n    console.log('ast', templateAST)\n\n    // const jsAST = transform(templateAST)\n}\n"],
  "mappings": "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",
  "names": []
}
